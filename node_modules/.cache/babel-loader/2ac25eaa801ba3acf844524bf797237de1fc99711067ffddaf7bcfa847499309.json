{"ast":null,"code":"var _jsxFileName = \"/Users/kumaran/Desktop/authenticator/src/timer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Timer = () => {\n  _s();\n  const [key, setKey] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setKey(prevKey => prevKey + 1); // Increment key to force remount\n    }, 120000); // Restart every 2 minutes (120000 milliseconds)\n\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timer-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(CountdownCircleTimer, {\n      // Change key to force remount and restart timer\n      isPlaying: true,\n      duration: 10,\n      colors: ['#004777', '#F7B801', '#A30000', '#A30000'],\n      size: 100,\n      strokeWidth: 6,\n      children: ({\n        remainingTime\n      }) => remainingTime\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_s(Timer, \"IYPkcXl41O+JlGV1m7sUxVH9Exo=\");\n_c = Timer;\nexport default Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["React","useState","useEffect","CountdownCircleTimer","jsxDEV","_jsxDEV","Timer","_s","key","setKey","interval","setInterval","prevKey","clearInterval","className","children","isPlaying","duration","colors","size","strokeWidth","remainingTime","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kumaran/Desktop/authenticator/src/timer.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\n\nconst Timer = () => {\n  const [key, setKey] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setKey(prevKey => prevKey + 1); // Increment key to force remount\n    }, 120000); // Restart every 2 minutes (120000 milliseconds)\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"timer-wrapper\">\n      <CountdownCircleTimer\n        key={key} // Change key to force remount and restart timer\n        isPlaying\n        duration={10}\n        colors={['#004777', '#F7B801', '#A30000', '#A30000']}\n        size={100}\n        strokeWidth={6}\n      >\n        {({ remainingTime }) => remainingTime}\n      </CountdownCircleTimer>\n    </div>\n  );\n};\n\nexport default Timer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,oBAAoB,QAAQ,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpE,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAEjCC,SAAS,CAAC,MAAM;IACd,MAAMQ,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCF,MAAM,CAACG,OAAO,IAAIA,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;;IAEZ,OAAO,MAAMC,aAAa,CAACH,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAKS,SAAS,EAAC,eAAe;IAAAC,QAAA,eAC5BV,OAAA,CAACF,oBAAoB;MACT;MACVa,SAAS;MACTC,QAAQ,EAAE,EAAG;MACbC,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAE;MACrDC,IAAI,EAAE,GAAI;MACVC,WAAW,EAAE,CAAE;MAAAL,QAAA,EAEdA,CAAC;QAAEM;MAAc,CAAC,KAAKA;IAAa,GAPhCb,GAAG;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQY;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEV,CAAC;AAAClB,EAAA,CAzBID,KAAK;AAAAoB,EAAA,GAALpB,KAAK;AA2BX,eAAeA,KAAK;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}