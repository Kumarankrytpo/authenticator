{"ast":null,"code":"var _jsxFileName = \"/Users/kumaran/Desktop/authenticator/src/timer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Timer = () => {\n  _s();\n  const [key, setKey] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setKey(prevKey => prevKey + 1); // Increment key to force remount\n    }, 120000); // Restart every 2 minutes (120000 milliseconds)\n\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timer-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(CountdownCircleTimer, {\n      // Change key to force remount and restart timer\n      isPlaying: true,\n      duration: 120,\n      colors: [['#004777', 0.4],\n      // Blue color with 40% stop\n      ['#F7B801', 0.4],\n      // Yellow color with 40% stop\n      ['#A30000'] // Red color with no stop (100%)\n      ],\n      size: 100,\n      strokeWidth: 6\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_s(Timer, \"IYPkcXl41O+JlGV1m7sUxVH9Exo=\");\n_c = Timer;\nexport default Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["React","useState","useEffect","CountdownCircleTimer","jsxDEV","_jsxDEV","Timer","_s","key","setKey","interval","setInterval","prevKey","clearInterval","className","children","isPlaying","duration","colors","size","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kumaran/Desktop/authenticator/src/timer.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\n\nconst Timer = () => {\n  const [key, setKey] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setKey(prevKey => prevKey + 1); // Increment key to force remount\n    }, 120000); // Restart every 2 minutes (120000 milliseconds)\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"timer-wrapper\">\n      <CountdownCircleTimer\n        key={key} // Change key to force remount and restart timer\n        isPlaying\n        duration={120}\n        colors={[\n            ['#004777', 0.4], // Blue color with 40% stop\n            ['#F7B801', 0.4], // Yellow color with 40% stop\n            ['#A30000'] // Red color with no stop (100%)\n          ]}\n        size={100}\n        strokeWidth={6}\n      >\n      </CountdownCircleTimer>\n    </div>\n  );\n};\n\nexport default Timer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,oBAAoB,QAAQ,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpE,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAEjCC,SAAS,CAAC,MAAM;IACd,MAAMQ,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCF,MAAM,CAACG,OAAO,IAAIA,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;;IAEZ,OAAO,MAAMC,aAAa,CAACH,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAKS,SAAS,EAAC,eAAe;IAAAC,QAAA,eAC5BV,OAAA,CAACF,oBAAoB;MACT;MACVa,SAAS;MACTC,QAAQ,EAAE,GAAI;MACdC,MAAM,EAAE,CACJ,CAAC,SAAS,EAAE,GAAG,CAAC;MAAE;MAClB,CAAC,SAAS,EAAE,GAAG,CAAC;MAAE;MAClB,CAAC,SAAS,CAAC,CAAC;MAAA,CACZ;MACJC,IAAI,EAAE,GAAI;MACVC,WAAW,EAAE;IAAE,GATVZ,GAAG;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAWY;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEV,CAAC;AAACjB,EAAA,CA5BID,KAAK;AAAAmB,EAAA,GAALnB,KAAK;AA8BX,eAAeA,KAAK;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}